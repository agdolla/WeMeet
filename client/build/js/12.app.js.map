{"version":3,"file":"12.app.js","sources":["webpack:///app/components/layouts/chat.jsx"],"sourcesContent":["import React from 'react';\nimport { Navbar } from '../containers';\nimport { ChatNavBody } from '../containers';\nimport { ChatWindow } from '../containers';\nimport { getUserData, getMessages, getSessions, getSessionId } from '../../utils';\nimport { socket } from '../../utils';\nimport Drawer from '@material-ui/core/Drawer';\n\n// let debug = require('react-debug');\nlet Promise = require('bluebird');\n\nexport default class Chat extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: props.user,\n            message: [],\n            sessions: {},\n            friend: \"\",\n            sessionId: \"\",\n            btnText: \"load earier messages\",\n            open: false\n        };\n    }\n\n    componentDidMount() {\n        this.getData();\n\n        socket.on('online', (data) => {\n            var tmp = Object.assign({}, this.state.user);\n            tmp.friends.forEach((i) => { if (i._id === data.user) i.online = data.online })\n            this.setState({ user: tmp })\n        });\n\n        socket.on('chat', (data) => {\n            let updatedSession = data.sessionData;\n            var newSessions = Object.assign({}, this.state.sessions);\n            newSessions[updatedSession._id] = updatedSession;\n            if (this.state.sessionId === updatedSession._id.toString()) {\n                var newMsgs = Array.from(this.state.message);\n                newMsgs.push({\n                    sender: data.sender,\n                    text: data.message,\n                    date: data.date,\n                    imgs: data.imgs,\n                });\n                this.setState({\n                    sessions: newSessions,\n                    btnText: \"load earier messages\",\n                    message: newMsgs,\n                });\n            }\n            else {\n                this.setState({\n                    sessions: newSessions,\n                });\n            }\n        });\n    }\n\n    componentWillUnmount() {\n        socket.removeAllListeners(\"chat\");\n        socket.removeAllListeners('online');\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (JSON.stringify(this.state.user) !== JSON.stringify(prevState.user)) {\n            this.getData();\n        }\n    }\n\n    async getData() {\n        let user = await getUserData(this.state.user._id);\n        let userData = user.data;\n        var sessions = await getSessions(userData._id);\n        sessions = sessions.data;\n        var sessionsData = {};\n        sessions.forEach((session) => {\n            sessionsData[session._id] = session\n        });\n        let sessionData = await this.getSession(userData.friends[0]._id);\n        let messages = await getMessages((new Date().getTime()), userData._id, sessionData)\n\n        this.setState({\n            user: userData,\n            sessions: sessionsData,\n            friend: userData.friends[0],\n            sessionId: sessionData,\n            message: messages.data,\n            btnText: messages.data.length === 0 ? \"say hello to your friend!\" : \"load earier messages\"\n        });\n    }\n\n    getSession(friend) {\n        return new Promise((resolve, reject) => {\n            let sessions = this.state.sessions;\n            let keys = Object.keys(sessions).filter((sessionId) => {\n                return sessions[sessionId].users.indexOf(friend) !== -1;\n            })\n            if (keys.length === 0) {\n                getSessionId(this.state.user._id, friend)\n                    .then(response => {\n                        resolve(response.data._id);\n                    })\n            }\n            else {\n                resolve(keys[0]);\n            }\n        })\n    }\n\n    handlePostMessage(message, imgs) {\n        socket.emit('chat', {\n            sessionId: this.state.sessionId,\n            date: (new Date()).getTime(),\n            sender: this.state.user._id,\n            target: this.state.friend._id,\n            message: message,\n            imgs: imgs\n        });\n    }\n\n    handleSwitchFriends(friendData) {\n        this.getMessagesForUser(friendData._id)\n            .then(data => {\n                this.setState({\n                    friend: friendData,\n                    sessionId: data.sessionId,\n                    message: data.messages.data,\n                    btnText: data.messages.data.length === 0 ? \"say hello to your friend!\" : \"load earier messages\"\n                });\n            })\n    }\n\n    async getMessagesForUser(userId) {\n        let sessionId = await this.getSession(userId);\n        let messages = await getMessages((new Date().getTime()), this.state.user._id, sessionId);\n        return {\n            sessionId: sessionId,\n            messages: messages\n        }\n    }\n\n    handleLoadMessage() {\n        var time = (this.state.message === undefined || this.state.message.length === 0) ?\n            (new Date().getTime()) : this.state.message[0].date;\n        getMessages(time, this.state.user._id, this.state.sessionId)\n            .then(response => {\n                let messages = response.data;\n                if (messages.length === 0) {\n                    return this.setState({\n                        btnText: \"nothing more to load\"\n                    })\n                }\n                var newMessages = messages.concat(this.state.message);\n                this.setState({\n                    message: newMessages\n                });\n            });\n    }\n\n    render() {\n        var chatwindow =\n            (\n                <ChatWindow target={this.state.friend} curUser={this.state.user}\n                    onPost={(message, imgs) => this.handlePostMessage(message, imgs)}\n                    message={this.state.message}\n                    onLoad={() => this.handleLoadMessage()}\n                    onExpand={() => this.setState({ open: !this.state.open })}\n                    btnText={this.state.btnText}\n                    failed={this.state.failed}>\n                </ChatWindow>\n            );\n        if (this.state.user.friends === undefined ? true : this.state.user.friends.length === 0) {\n            chatwindow = (\n                <div className=\"col-md-7 col-sm-7 col-xs-7\">\n                    <div className=\"alert alert-info\" role=\"alert\">\n                        You don't have any chats yet\n                    </div>\n                </div>\n            )\n        }\n        return (\n            <div style={{ marginTop: '70px' }}>\n                <Drawer open={this.state.open}\n                    style={{ width: '500px' }}\n                    onClose={() => this.setState({ open: false })}>\n                    <ChatNavBody sessions={this.state.sessions}\n                        userData={this.state.user} activeFriend={this.state.friend._id} switchUser={(id) => this.handleSwitchFriends(id)} />\n                </Drawer>\n                <Navbar chat=\"active\" user={this.state.user} />\n                <div className=\"container mainElement\">\n                    <div className=\"row\">\n                        <div style={{ marginRight: '-50px' }}\n                            className=\"col-md-5 col-sm-5 col-xs-5 col-md-offset-1 col-sm-offset-1 col-xs-offset-1 chat-left\">\n                            <ChatNavBody sessions={this.state.sessions}\n                                userData={this.state.user} activeFriend={this.state.friend._id} switchUser={(id) => this.handleSwitchFriends(id)} />\n                        </div>\n                        {chatwindow}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;;;AAAA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAFA;AAWA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AADA;AAGA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;;;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAMA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AANA;AADA;AARA;AAoBA;;;;AAjMA;AACA;AADA;;;;A","sourceRoot":""}