'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _navbar = require('../component/navbar');

var _navbar2 = _interopRequireDefault(_navbar);

var _navbody = require('./navbody');

var _navbody2 = _interopRequireDefault(_navbody);

var _chatwindow = require('./chatwindow');

var _chatwindow2 = _interopRequireDefault(_chatwindow);

var _server = require('../server');

var _credentials = require('../credentials');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Chat = function (_React$Component) {
  _inherits(Chat, _React$Component);

  function Chat(props) {
    _classCallCheck(this, Chat);

    var _this = _possibleConstructorReturn(this, (Chat.__proto__ || Object.getPrototypeOf(Chat)).call(this, props));

    _this.state = {
      user: {},
      message: [],
      friend: "",
      sessionId: "",
      btnText: "load earier messages"
    };
    return _this;
  }

  _createClass(Chat, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      this.getData();
      _credentials.socket.on('online', function (user) {
        if (_this2.state.user.friends.filter(function (item) {
          if (item._id === user) return true;else return false;
        }).length > 0) (0, _server.getUserData)(_this2.props.user, function (userData) {
          _this2.setState({
            user: userData
          });
        });
      });
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate() {
      _credentials.socket.removeAllListeners("chat");
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      var _this3 = this;

      _credentials.socket.on('chat', function () {
        (0, _server.getSessionId)(_this3.props.user, _this3.state.friend, function (session) {
          _this3.setState({
            sessionId: session._id
          }, function () {
            (0, _server.getMessages)(new Date().getTime(), _this3.props.user, _this3.state.sessionId, function (message) {
              _this3.setState({
                message: message
              }, function () {
                (0, _server.getUserData)(_this3.props.user, function (userData) {
                  _this3.setState({
                    user: userData,
                    btnText: "load earier messages"
                  });
                });
              });
            });
          });
        });
      });
    }
  }, {
    key: 'getData',
    value: function getData() {
      var _this4 = this;

      (0, _server.getUserData)(this.props.user, function (userData) {
        _this4.setState({
          user: userData
        }, function () {
          _this4.setState({ friend: _this4.state.user.friends[0]._id }, function () {
            (0, _server.getSessionId)(_this4.props.user, _this4.state.friend, function (session) {
              _this4.setState({
                sessionId: session._id
              }, function () {
                (0, _server.getMessages)(new Date().getTime(), _this4.props.user, _this4.state.sessionId, function (message) {
                  _this4.setState({
                    message: message,
                    btnText: "load earier messages"
                  });
                });
              });
            });
          });
        });
      });
    }
  }, {
    key: 'handlePostMessage',
    value: function handlePostMessage(message) {
      var _this5 = this;

      _credentials.socket.emit('chat', { currUser: this.props.user, friend: this.state.friend });
      (0, _server.postMessage)(this.state.sessionId, this.props.user, this.state.friend, message, function (newMessage) {
        _this5.setState({ message: newMessage }, function () {
          (0, _server.getUserData)(_this5.props.user, function (userData) {
            _this5.setState({
              user: userData,
              btnText: "load earier messages"
            });
          });
        });
      });
    }
  }, {
    key: 'handleSwitchFriends',
    value: function handleSwitchFriends(friendId) {
      var _this6 = this;

      this.setState({ friend: friendId }, function () {
        (0, _server.getSessionId)(_this6.props.user, _this6.state.friend, function (session) {
          _this6.setState({
            sessionId: session._id
          }, function () {
            (0, _server.getMessages)(new Date().getTime(), _this6.props.user, _this6.state.sessionId, function (message) {
              _this6.setState({
                message: message
              }, function () {
                (0, _server.getUserData)(_this6.props.user, function (userData) {
                  _this6.setState({
                    user: userData,
                    btnText: "load earier messages"
                  });
                });
              });
            });
          });
        });
      });
    }
  }, {
    key: 'handleLoadMessage',
    value: function handleLoadMessage(e) {
      var _this7 = this;

      e.preventDefault();
      var time = this.state.message.length === 0 ? new Date().getTime() : this.state.message[0].date;
      (0, _server.getMessages)(time, this.props.user, this.state.sessionId, function (messages) {
        if (messages.length === 0) {
          return _this7.setState({
            btnText: "nothing more to load"
          });
        }
        var newMessages = messages.concat(_this7.state.message);
        _this7.setState({
          message: newMessages
        });
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this8 = this;

      var chatwindow = _react2.default.createElement(_chatwindow2.default, { target: this.state.friend, curUser: this.props.user,
        onPost: function onPost(message) {
          return _this8.handlePostMessage(message);
        },
        message: this.state.message,
        onLoad: function onLoad(e) {
          return _this8.handleLoadMessage(e);
        },
        btnText: this.state.btnText });
      if (this.state.user.friends === undefined ? true : this.state.user.friends.length === 0) {
        chatwindow = _react2.default.createElement(
          'div',
          { className: 'col-md-7 col-sm-7 col-xs-7' },
          _react2.default.createElement(
            'div',
            { className: 'alert alert-info', role: 'alert' },
            'You don\'t have any chats yet'
          )
        );
      }
      return _react2.default.createElement(
        'div',
        { style: { marginTop: '70' } },
        _react2.default.createElement(_navbar2.default, { chat: 'active', user: this.state.user }),
        _react2.default.createElement(
          'div',
          { className: 'container mainElement' },
          _react2.default.createElement(
            'div',
            { className: 'row' },
            _react2.default.createElement(
              'div',
              { className: 'col-md-5 col-sm-5 col-xs-5 col-md-offset-1 col-sm-offset-1 col-xs-offset-1 chat-left' },
              _react2.default.createElement(
                'div',
                { className: 'panel panel-dafault' },
                _react2.default.createElement(
                  'div',
                  { className: 'panel-heading panel-heading-chat', style: { paddingBottom: "3px" } },
                  _react2.default.createElement(
                    'ul',
                    { className: 'nav nav-pills nav-justified' },
                    _react2.default.createElement(
                      'li',
                      { role: 'presentation', className: 'active' },
                      _react2.default.createElement(
                        'a',
                        null,
                        'Friends'
                      )
                    )
                  )
                ),
                _react2.default.createElement(_navbody2.default, { data: this.state.user, activeFriend: this.state.friend, switchUser: function switchUser(id) {
                    return _this8.handleSwitchFriends(id);
                  } })
              )
            ),
            chatwindow
          )
        )
      );
    }
  }]);

  return Chat;
}(_react2.default.Component);

exports.default = Chat;