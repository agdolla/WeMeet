'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _React = require('React');

var _React2 = _interopRequireDefault(_React);

var _navchatitem = require('./navchatitem');

var _navchatitem2 = _interopRequireDefault(_navchatitem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NavBody = function (_React$Component) {
  _inherits(NavBody, _React$Component);

  function NavBody(props) {
    _classCallCheck(this, NavBody);

    var _this = _possibleConstructorReturn(this, (NavBody.__proto__ || Object.getPrototypeOf(NavBody)).call(this, props));

    _this.state = props;
    return _this;
  }

  _createClass(NavBody, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      this.setState(newProps);
    }
  }, {
    key: 'getLastmessage',
    value: function getLastmessage(friendId) {
      var filterResult = this.state.data.sessions.filter(function (session) {
        if (session.users.indexOf(friendId) !== -1) {
          return true;
        }
        return false;
      });

      if (filterResult.length === 0) {
        return undefined;
      } else {
        return filterResult[0].lastmessage;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var alert = _React2.default.createElement(
        'div',
        { className: 'alert alert-info', role: 'alert' },
        'You don\'t have any friends yet.'
      );

      return _React2.default.createElement(
        'div',
        { className: 'panel-body' },
        _React2.default.createElement(
          'ul',
          { className: 'list-group friends', style: {
              'marginBottom': '0'
            } },
          this.state.data === undefined ? null : this.state.data.friends === undefined || this.state.data.friends.length === 0 ? alert : this.state.data.friends.map(function (friend) {
            return _React2.default.createElement(_navchatitem2.default, {
              key: friend._id,
              data: friend,
              activeFriend: _this2.props.activeFriend,
              currentUser: _this2.state.data._id,
              switchUser: _this2.props.switchUser,
              lastmessage: _this2.getLastmessage(friend._id) });
          })
        )
      );
    }
  }]);

  return NavBody;
}(_React2.default.Component);

exports.default = NavBody;